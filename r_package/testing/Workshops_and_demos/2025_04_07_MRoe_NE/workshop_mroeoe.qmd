---
title: "Hello, I'm healthiar!"
# subtitle: "Comparison of methods"
author:
  - name:
      given: Axel Luyten and
      family: Alberto Castro
    # affiliations:
      # - name: Swiss TPH
    # orcid: 0000-0002-7005-5889
    email: axel.luyten@swisstph.ch & alberto.castrofernandez@swisstph.ch
date: 2025-03-24 # last-modified
editor: source
execute: 
  eval: true
  echo: true
  warning: false
freeze: auto
format:
  revealjs:
    # code-line-numbers: true # Doesn't work; probably works for html format
    css: custom_style.css
    # code-tools: # Test at later point what this does
      # source: https://github.com/best-cost/best-cost_WPs/tree/master
    # code-fold: true # Folds code chunk in the HTML prez
    incremental: true
    transition: none # alts: fade, none, slide
    transition-speed: default
    # table-of-contents: true
    # toc-depth: 1
    logo: images/combo_logo_stph_bc.png
    # footer: 'healthiar WP5 workshop 1'
    smaller: true # If you set {.smaller} after the slide title, reduces font automatically so content fits on slide
    scrollable: true # If you set {.scrollable} after the slide title, let's you scroll on the slide
    template-partials:
      - title-slide.html
    title-slide-attributes:
      data-background-image: images/combo_title_stph_bc.png
      data-background-size: contain
      data-background-opacity: "1"
    slide-number: true
    embed-resources: true
---

<!-- #TODO -->

<!-- think about where to do the break -->

<!-- when to show the first attribute_health function call -->

```{r, echo=FALSE, include=TRUE}
library(healthiar)
library(tibble)
library(dplyr)
library(purrr)
library(tidyr)
library(stringr)
library(knitr)

options(knitr.kable.max_rows = 100)
set.seed(1)

# load("../testing/Workshops_and_demos/2025_04_07_MRÃ¶_NE/data_clean.RData")
# load("data_clean.RData")
```

# Today

-   About `healthiar`

-   Examples

    -   Example: `attribute_health()` with AR
    
    -   Example: iteration  with `attribute_health()` and AR
    
    -   Example: `compare()`

-   Post-`healthiar` workflow

-   Equation for absolute risk

-   Discussion


# About `healthiar`

## About `healthiar` 1/3

::: fragment
`healthiar` is an R package (= collection of R functions)
:::

::: fragment
The `healthiar` functions allow you to quantify and monetize the health impacts of environmental stressors (air pollution & noise)
:::

::: fragment
Let's jump right in, with an example of a `healthiar` R function call
:::

::: fragment
![](images/attribute_health_simple_annotated.png){width="600"}
:::


## About `healthiar` 2/3

Selection of `healthiar` core family members (functions)

-   `attribute_health()` to env. exposure with either relative or absolute risk
-   `summarize_uncertainty()` Monte Carlo simulation
-   `attribute_mod()` modify an existing assessment
-   `compare()` two scenarios
-   `monetize()` health impacts
-   `cba()` cost-benefit analysis
-   `prepare_exposure()` from spatial exposure data and geographic units data 

::: {.nonincremental}

## About `healthiar` 3/3

**Installation & getting started using the README file**

![[README file](https://github.com/best-cost/best-cost_WPs?tab=readme-ov-file#readme) of the `healthiar` R package](images/readme.png)
:::

## `healthiar` in RStudio

![Landing page of the `healthiar` package in RStudio, where you find the package vignettes and function documentation.](images/healthiar_package_landing_page.png)


## Function documentation

::: {fragment}
![](images/fun_doc_start.png)
:::

::: fragment
Any arguments without a **=** symbol after the name have no default and must be user-specified

For a more detailed function documentation walk through see the [Appendix]
:::


# Example: `attribute_health()` with AR

## Refresher - Burden of disease with absolute risk

![](images/bod_ar.png)

## `attribute_health()` with AR

Goal: attribute cases of high annoyance (HA) to noise exposure

::: fragment
![Source input data: NIPH](images/example_noise_ha.png)
:::

::: fragment
```{r}
#| code-line-numbers: "|1|2|3-5|"
results_noise_ha <- attribute_health(
    approach_risk = "absolute_risk",
    exp_central = c(57.5, 62.5, 67.5, 72.5, 77.5),
    pop_exp = c(387500, 286000, 191800, 72200, 7700),
    erf_eq_central = "78.9270-3.1162*c+0.0342*c^2")
```
:::


## Output structure

::: fragment
Every `attribute` output initially consists of two main lists ("folders"), and additional sub-lists ("sub-folders")

-   `health_main` contains the main results

-   `health_detailed` contains more detailed results and additional information

    -   `impact_raw` contains detailed results

    -   `input_table` contains the input data as entered in the function call

    -   `input_args` = function arguments (list) as used by R in the background
:::

:::: fragment
::: callout-info
The output tables are in the [`tibble`](https://r4ds.had.co.nz/tibbles.html) format, which is a modern version of the original data frame, and can be used like a data frame
:::
::::

## How to access the results

:::: fragment
::: callout-tip
Different ways exist and you might have a personal preference!
:::
::::

:::: fragment
::: panel-tabset
## By clicking

Go to the *Environment* tab in RStudio ...

![](images/rstudio_env.png)

... and click on a variable to "open" it.

![](images/rstudio_view.png) Alternatively, you can use `View(results_noise_ha)`, which has the same effect.

## With `$` operator

`results_noise_ha$health_main$impact_rounded`

Note: after typing the `$` sign you can see all available options by pressing the tab key and use the arrows & tab keys to select an option (or alternatively use the mouse)

:::
::::

## Let's inspect the main results

::: fragment
```{r, echo=TRUE,eval=FALSE,include=TRUE}
results_noise_ha$health_main
```
:::

::: fragment
```{r, echo=FALSE,include=TRUE,eval=TRUE}
results_noise_ha[["health_main"]] |> 
  select(approach_risk, impact) |> 
  knitr::kable()
```
:::


## Results per noise exposure band

::: fragment
```{r, echo=TRUE, eval=FALSE, include=TRUE}
results_noise_ha$health_detailed$impact_raw
```
:::

::: fragment
```{r, echo=FALSE, eval=TRUE, include=TRUE}
results_noise_ha[["health_detailed"]][["impact_raw"]] |> 
  select(exposure_dimension, exp, pop_exp, impact) |> 
  knitr::kable()
```
:::



# Example: Iteration with `attribute_health()`

## Iteration with `attribute_health()`

::: fragment
Goal: attribute HA cases to noise exposure in multiple geographic units, such as municipalities, provinces, countries, ...
:::

:::: fragment

```{r, eval=FALSE, echo=TRUE}
#| code-line-numbers: "|1-2|3-5|7-14|"

results_noise_ha_iteration <- attribute_health(
  approach_risk = "absolute_risk",
  geo_id_disaggregated = c("Asker", "Baerum", "Oslo", "Lorenskok", "Lillestrom",
                           "Raelingen", "Nordre Follo"),
  geo_id_aggregated =  rep("Oslo & agglomeration", 7),
  erf_eq_central = "78.927-3.1162*c+0.0342*c^2",
  exp_central = rep(list(data_noise$exp_cat), 7),
  pop_exp = list(data_noise$pop_asker,
                 data_noise$pop_baerum,
                 data_noise$pop_oslo,
                 data_noise$pop_lorenskog,
                 data_noise$pop_lillestrom,
                 data_noise$pop_raelingen,
                 data_noise$pop_nordre_follo)
)
```

::::

:::: {.fragment .nonincremental}
::: callout-tip
-   For iterations, enter geo unit-specific inputs as a list

-   Feed unique geo ID's as a vector to the `geo_id_disaggregated` argument (e.g. municipality names)

-   Optional: aggregate geo unit-specific results by providing higher-level ID's (e.g. region names) to the `geo_id_aggregated` argument (as a vector)
:::
::::


# Example: `compare()`

## `compare()`

::: fragment
Goal: comparison of two scenarios

1.  Use `attribute_health()` to calculate burden of scenarios A & B
:::

::::: columns
::: {.column .fragment width="50%"}
```{r}
scenario_A <- attribute_health(
    exp_central = 8.85,   # EXPOSURE 1
    cutoff_central = 5, 
    bhd_central = 25000,
    approach_risk = "relative_risk",
    erf_shape = "log_linear",
    rr_central = 1.118,
    rr_increment = 10)
```
:::

::: {.column .fragment width="50%"}
```{r}
scenario_B <- attribute_health(
    exp_central = 6,     # EXPOSURE 2
    cutoff_central = 5, 
    bhd_central = 25000,
    approach_risk = "relative_risk",
    erf_shape = "log_linear",
    rr_central = 1.118,
    rr_increment = 10)
```
:::
:::::

::: fragment
2.  Use `compare()` to compare scenarios A & B
:::

::: fragment
```{r}

results_comparison <- compare(
  
  approach_comparison = "delta", # or "pif" (population impact fraction)
  
  output_attribute_1 = scenario_A,
  
  output_attribute_2 = scenario_B
)
```
:::

## Let's check the comparison results!

::: fragment
```{r, echo=TRUE,eval=FALSE,include=TRUE}
results_comparison$health_main
```
:::

::: fragment
```{r, echo=FALSE,include=TRUE,eval=TRUE}
results_comparison[["health_main"]] |> 
  dplyr::select(
    impact, impact_rounded,
    impact_1, impact_2,
    bhd,
    dplyr::starts_with("exp_"),
    -dplyr::starts_with("exp_ci"), # remove col "exp_ci"
    dplyr::starts_with("rr_con")) |> 
  dplyr::slice_head() |> 
  knitr::kable()
```
:::

# Post-`healthiar` workflow

## Export results

::: panel-tabset
## Export as `.csv` file

```{r, eval=FALSE,echo=TRUE,include=TRUE}
write.csv(x = results_pm_copd$health_main, file = "exported_results/results_pm_copd.csv")
```

## Save as `.Rdata` file

```{r, eval=FALSE,echo=TRUE,include=TRUE}
save(results_pm_copd, file = "exported_results/results_pm_copd.Rdata")
```

## Export to Excel (as `.xlsx` file)

```{r, eval=FALSE,echo=TRUE,include=TRUE}
openxlsx::write.xlsx(x = results_pm_copd$health_main, file = "exported_results/results_pm_copd.xlsx")
```

![*Exported to .xlsx format*](images/export_xlsx.png)
:::

## Visualize results

::: nonincremental
Visualization is out of scope of `healthiar`. You can visualize in

-   R, e.g. with the `ggplot2` package ([online book by the creator](https://ggplot2-book.org/))
-   Excel (export results first)
-   Other tools

:::

## Equations

![](images/equation_ar.png){width="1000"}

# Discussion
