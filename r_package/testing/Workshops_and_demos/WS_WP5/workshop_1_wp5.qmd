---
title: "Hello, I'm healthiar!"
subtitle: "R package workshop for BEST-COST"
author:
  - name:
      given: Axel Luyten &
      family: Alberto Castro
    affiliations:
      - name: Swiss TPH
    orcid: 0000-0002-7005-5889
    email: axel.luyten@swisstph.ch & alberto.castrofernandez@swisstph.ch
date: 2025-03-24 # last-modified
editor: source
execute: 
  eval: true
  echo: true
  warning: false
freeze: auto
format:
  revealjs:
    css: custom_style.css
    # code-tools: # Test at later point what this does
      # source: https://github.com/best-cost/best-cost_WPs/tree/master
    # code-fold: true # Folds code chunk in the HTML prez
    incremental: true
    transition: none # alts: fade, none, slide
    transition-speed: default
    # table-of-contents: true
    # toc-depth: 1
    logo: images/combo_logo_stph_bc.png
    # footer: 'healthiar WP5 workshop 1'
    smaller: true # If you set {.smaller} after the slide title, reduces font automatically so content fits on slide
    scrollable: true # If you set {.scrollable} after the slide title, let's you scroll on the slide
    template-partials:
      - title-slide.html
    title-slide-attributes:
      data-background-image: images/combo_title_stph_bc.png
      data-background-size: contain
      data-background-opacity: "1"
    slide-number: true
    embed-resources: true
---

<!-- #TODO -->

<!-- think about where to do the break -->

<!-- think about which slides I could skip if necessary -->

```{r, echo=FALSE}
library(healthiar)
library(tibble)
library(dplyr)
library(purrr)
library(tidyr)
library(stringr)
library(knitr)

options(knitr.kable.max_rows = 100)
set.seed(1)
```

# Workshop

::: fragment
**Part 1 (today)**

Get to know `healthiar`

No need to code!
:::

::: fragment
**In the mean time**

-   Install `healthiar` (& RStudio) - We're here to help!

-   Work on exercises
:::

::: fragment
**Part 2 (on 2 April)**

-   Exercises walk through (in RStudio)

-   Mock case studies - Your turn!

    -   Air pollution & noise

-   Final remarks
:::

# Today

:::::: columns
:::: {.column .fragment .fade-in width="45%"}
**1st hour**

-   \[About healthiar\]

-   \[The healthiar package in RStudio\]

-   Examples

    -   \[Example: attribute_health() using RR\]

    -   \[Example: attribute_health() with RR & uncertainty\]

    -   \[Example: attribute_health() with AR\]

-   [Q&A I] - Please save your questions!

::: fragment
**Break**
:::
::::

::: {.column .fragment .fade-in width="45%"}
**2nd hour**

-   \[healthiar examples II\]

-   \[Post-healthiar workflow\]

-   [Homework - Exercises]

-   [Q&A II] - Please save your questions!

-   [Conclusion]
:::
::::::

# About *`healthiar`*

------------------------------------------------------------------------

![](images/attribute_health_simple.png){fig-align="center" width="800"}

. . .

What's going on here?

------------------------------------------------------------------------

## Burden of disease - Relative risk

![](images/bod_rr.png)

## Burden of disease - Absolute risk

![](images/bod_ar.png)

## About *`healthiar`* (1/5)

![Figure: healthiar overview](images/EPHC_poster_landscape_v0.2.2_only_package_overview.jpg){width="700"}

TODO: update names in poster; make internal testing ticked

## About *`healthiar`* (2/5)

`healthiar` core family members (functions)

-   `attribute_health()` with either relative and absolute risk
-   `attribute_lifetable()` life table analysis (RR & AR)
-   `summary_uncertainty()` Monte Carlo simulation
-   `attribute_mod()` modify an existing assessment
-   `compare()` two scenarios
-   `monetize()` health impacts
-   `cba()` cost-benefit analysis
-   `socialize()` discovers inequalities in health impacts
-   `get_mdi()` creates the BEST-COST Multidimensional Deprivation Index (MDI)
-   `get_daly()` by adding up YLL & YLD

## About *`healthiar`* (1/5)

**BEST-COST GitHub repository**

Let's check out the [BEST-COST GitHub repo](https://github.com/best-cost/best-cost_WPs) and the [README file](https://github.com/best-cost/best-cost_WPs/tree/master?tab=readme-ov-file#readme)

[![Landing page of the BEST-COST GitHub repo. The README file tells you how to get started. The folder r_package contains package-related files (including function code). Developments are discussed and documented under Issues.](images/bc_github_repo.png)](https://github.com/best-cost/best-cost_WPs)

## About *`healthiar`* (4/5)

**Installation**

The [README file](https://github.com/best-cost/best-cost_WPs?tab=readme-ov-file#readme) contains the following information

-   [GET STARTED WITH THE *healthiar* R PACKAGE](https://github.com/best-cost/best-cost_WPs?tab=readme-ov-file#get-started-with-the-healthiar-r-package)

-   [Initial installation of the *healthiar* package from GitHub](Initial%20installation%20of%20the%20healthiar%20package%20from%20GitHub)

-   [TERMS OF USE](https://github.com/best-cost/best-cost_WPs?tab=readme-ov-file#terms-of-use)

-   [NOTE](https://github.com/best-cost/best-cost_WPs?tab=readme-ov-file#note)

-   [DISCLAIMER](https://github.com/best-cost/best-cost_WPs?tab=readme-ov-file#disclaimer)

. . .

![README file of the `healthiar` R package](images/readme.png)

## About *`healthiar`* (5/5)

Example of a `healthiar` function call

![](images/attribute_health_simple.png){width="350"}

# The *healthiar* package in RStudio

## *`healthiar`* in RStudio 1/3

![RStudio startup screen](images/rstudio_startup_screen.png)

## *`healthiar`* in RStudio 2/3

Post installation, you can access the `healthiar` package landing page in RStudio by going to the *Packages* tab and then clicking on the `healthiar` package.

![](images/rstudio_how_to_access_package_landing_page.png)

## *`healthiar`* in RStudio 3/3

![Landing page of the `healthiar` package in RStudio, where you find the package vignettes and function documentation.](images/healthiar_package_landing_page.png)

## Vignette (1/2)

vignette

:   long-form guide to a package

![The intro vignette introduces `healthiar` step-by-step and contains (reproducible) examples. You can open the `intro_to_healthiar` vignette within RStudio or as a *HTML* within your browser.](images/rstudio_intro_vignette.png)

## Vignette (2/2)

::: callout-note
The **vignette is a work in progress**: we appreciate any feedback or suggestions you might have to make it more useful to future users!
:::

You can access the intro vignette by

1.  going to the *Packages* tab in RStudio, scrolling to the *healthiar* package and clicking on *healthiar* \> *User guides, package vignettes and other documentation* \> *HTML*

2.  running *browseVignettes("healthiar")* in the console and clicking on *HTML* on the page that pops up

## Function documentation (1/3)

Let's clarify some R jargon

![](images/attribute_health_simple_annotated.png)

## Function documentation (2/3)

Access the function documentation by clicking on a function name in the package landing page.

::: callout-tip
Alternatively, access the function documentation with `?attribute_health`
:::

Any function documentation contains the following sections:

-   *Title* Essence of the function

-   *Description* What does the function do exactly?

-   *Usage* Bare-minimum examples of how to use the function, including default argument value(s)

-   *Arguments* Short description of each function argument, e.g. input type (`numeric` vs. `string`), options (if available), how each argument affects the output, ...

-   *Details* (optional) Additional details about the function

-   *Value* Information about the function output

-   *Examples* (optional) Shows how the function works

## Function documentation (3/3)

:::::: columns
::: {.column .fragment .fade-in width="45%"}
![](images/fun_doc_start.png)
:::

:::: {.column .fragment .fade-in width="45%"}
::: callout-important
Any arguments without a "*="* symbol after the name have no default and must be user-specified
:::

For a more detailed function documentation walk through see the [Appendix]
::::
::::::

# Example: `attribute_health()` using RR

------------------------------------------------------------------------

## Example: `attribute_health()` with RR

Goal: attribute COPD cases to air pollution

:::: panel-tabset
## Hard-coded input data

```{r, eval=TRUE,include=TRUE,echo=TRUE}
#| code-line-numbers: "|1|2|3|4-7|8|9|10"

results_pm_copd <-
  healthiar::attribute_health(
    erf_shape = "log_linear", # Alternatives: "linear", "log_log"
    rr_central = 1.369, 
    rr_increment = 10,  # μg / m^3
    exp_central = 8.85, # μg / m^3
    cutoff_central = 5, # μg / m^3
    bhd_central = 30747 # baseline health data: COPD incidence
  ) 
```

## Pre-loaded data

::: callout-tip
`healthiar` comes with some example data that start with `exdat_` that allow you to test functions.
:::

```{r, eval=TRUE,include=TRUE,echo=TRUE}

results_pm_copd <-
  healthiar::attribute_health(
    erf_shape = "log_linear",
    rr_central = exdat_pm_copd$relative_risk, 
    rr_lower = exdat_pm_copd$relative_risk_lower,
    rr_upper = exdat_pm_copd$relative_risk_upper,
    rr_increment = 10, 
    exp_central = exdat_pm_copd$mean_concentration,
    cutoff_central = exdat_pm_copd$cut_off_value,
    bhd_central = exdat_pm_copd$incidents_per_100_000_per_year/1E5*exdat_pm_copd$population_at_risk,
    # bhd_central = exdat_pm_copd$incidence # Uncomment once change committed to main
  ) 
```
::::

## Output structure

Every `attribute` output consists of two lists ("folders")

-   `health_main` contains the main results

-   `health_detailed` detailed results (and in some cases even more information about the assessment/calculation)

TODO: add to detailed bullet: interim results, input; add that tibble works like data frame note: add here that format is tibble (but can be changed to data frame)

note: screenshot of how to click on variable in env (put that as first option) . . .

#### Different ways to access the results

::: callout-tip
This is personal preference! However, you might encounter all options.
:::

::: panel-tabset
## By clicking

Go to the *Environment* tab in RStudio and click on a variable to "open" it. Alternatively, you can use `View(results_pm_copd)`, which has the same effect.

## With `$` operator

`results_pm_copd$health_main$impact_rounded`

Note: after typing the `$` sign you can see all available options by pressing the tab key and use the arrows & tab keys to select an option (or alternatively use the mouse)

## With `[[]]` operator

`results_pm_copd[["health_main"]]`

Note: if the cursor is located within the square braces you can see all available options by pressing the tab key

## With `pluck()` & `pull()`

Using the `purrr::pluck` function to select a list and then the `dplyr::pull` function extract values from a specified column

`results_pm_copd |> purrr::pluck("health_main") |> dplyr::pull("impact_rounded")`

Note: available options can't be displayed automatically using these functions -\> better suited for a more permanent analysis script
:::

## Let's check the main output!

```{r, echo=TRUE,eval=FALSE,include=TRUE}
results_pm_copd[["health_main"]]
```

```{r, echo=FALSE,include=TRUE,eval=TRUE}
results_pm_copd[["health_detailed"]][["impact_raw"]] |> 
  select(impact_rounded, impact, pop_fraction, erf_ci, rr, exp, bhd) |> 
  knitr::kable()
```

. . .

::: callout-tip
Each row shows a result obtained with all the input data & calculation pathway specifications shown in that row
:::

Some of the most relevant columns include: - *impact_rounded* Rounded attributable health impact/burden - *impact* Raw impact/burden - *pop_fraction* Population attributable fraction (PAF) - *erf_ci* Specifies whether `rr_central`, `..._lower` or `..._upper` was used in calculation - *rr* Specifies raw rr used in calculation - *-* exp *-* bhd\*

# Example: `attribute_health()` with RR & uncertainty

------------------------------------------------------------------------

## Example: `attribute_health()` with RR & uncertainty

Goal: attribute lung cancer deaths to PM2.5 exposure

```{r, eval=TRUE,include=TRUE,echo=TRUE}
#| code-line-numbers: "|5-6|9-10|13-14"

results_pm_copd <-
  healthiar::attribute_health(
    erf_shape = "log_linear",
    rr_central = 1.369, 
    rr_lower = 1.124, 
    rr_upper = 1.664,
    rr_increment = 10, 
    exp_central = 8.85, 
    exp_lower = 8, 
    exp_upper = 10,
    cutoff_central = 5,
    bhd_central = 30747, 
    bhd_lower = 28000, 
    bhd_upper = 32000
  ) 
```

## Let's check the detailed output!

<!-- #TODO -->

:::: {.fragment .fade-in}
::: callout-tip
See the intro vignette for a detailed description of output columns.
:::
::::

::: {.fragment .fade-in}
The `health_detailed` output table contains all different combinations of the arguments with uncertainty. E.g. `rr_central` with `exp_lower` and `bhd_upper`, ...
:::

::: {.fragment .fade-in}
```{r, echo=TRUE,eval=FALSE,include=TRUE}
results_pm_copd[["health_detailed"]][["impact_raw"]]
```

```{r, echo=FALSE,include=TRUE,eval=TRUE}
results_pm_copd[["health_detailed"]][["impact_raw"]] |> knitr::kable()
```
:::

## Include summary uncertainty

TODO: add here Monte Carlo example

# Example: `attribute_health()` with AR

Goal: attribute cases of high annoyance (HA) to noise exposure

:::::: columns
::: {.column .fragment .fade-in width="50%"}
```{r}
exdat_noise_ha <-
  exdat_noise_ha |>
  dplyr::filter(!is.na(exdat_noise_ha$exposure_mean))

results_noise_ha <- attribute_health(
    approach_risk = "absolute_risk",
    exp_central = c(57.5, 62.5, 67.5, 72.5, 77.5),
    pop_exp = exdat_noise_ha$population_exposed_total,
    erf_eq_central = "78.9270-3.1162*c+0.0342*c^2"
)
```

TODO: hard code the function input
:::

::: {.column .fragment .fade-in width="50%"}
![Source input data: NIPH](images/example_noise_ha.png)
:::

::: {.fragment .fade-in}
```{r, echo=TRUE}
#| output-location: fragment
results_noise_ha[["health_detailed"]][["impact_raw"]] |> knitr::kable()
```
:::
::::::

## Iteration example (1/)

Goal: attribute disease cases to PM2.5 exposure in multiple geographic units, such as municipalities, provinces, countries, ...

::: callout-tip
-   For iterations, enter geo unit-specific inputs as lists use `as.list()` function

-   Feed unique geo ID's to the \`geo_id_disaggregated\` argument (e.g. municipality names)

-   Optional: aggregate geo unit-specific results by providing higher-level ID's (e.g. region names)
:::

TODO: make printed table smaller, select relevant columns

. . .

TODO: mention that geo ids to be entered es vector

TODO: add name aggregated argument to bulb box

::: panel-tabset \## as.list(...)

```{r}
#| code-line-numbers: "|5-6|9-10|13-14"
#| output-location: fragment

results_iteration <- healthiar::attribute_health(
    geo_id_disaggregated = c("Zurich", "Basel", "Geneva", "Ticino", "Valais"), 
    geo_id_aggregated = c("Ger","Ger","Fra","Ita","Fra"),
    rr_central = 1.369,
    rr_increment = 10, 
    cutoff_central = 5,
    erf_shape = "log_linear",
    exp_central = as.list(c(11, 11, 10, 8, 7)),
    bhd_central = as.list(c(4000, 2500, 3000, 1500, 500))
)
```

Here the we want to aggregate results by language region (`"Ger", "Fra", "Ita"`)

## \|\> as.list()

TODO: remove pipe; replace as.list with list

```{r}

results_iteration <- healthiar::attribute_health(
    geo_id_disaggregated = c("Zurich", "Basel", "Geneva", "Ticino", "Valais"), 
    geo_id_aggregated = c("Ger","Ger","Fra","Ita","Fra"),
    rr_central = 1.369,
    rr_increment = 10, 
    cutoff_central = 5,
    erf_shape = "log_linear",
    exp_central = c(11, 11, 10, 8, 7) |> as.list(),
    bhd_central = c(4000, 2500, 3000, 1500, 500) |> as.list()
)
```

:::

## Let's check the iteration output! (/)

::: callout-tip
The main output contains aggregated results if available, or disaggregated results if no aggregation ID was provided
:::

```{r, echo=TRUE,eval=FALSE,include=TRUE}
results_iteration[["health_main"]]
```

```{r, echo=FALSE,include=TRUE,eval=TRUE}
results_iteration[["health_main"]] |> 
  dplyr::select(geo_id_aggregated, impact_rounded, erf_ci, exp_ci, bhd_ci) |> 
  knitr::kable()
```

## Example: Iteration - Analysis of multiple geo units

Analogously to the single geo unit example the iteration can also be run with uncertainties in one or more input variables.

```{r}

results_iteration <- healthiar::attribute_health(
    geo_id_disaggregated = c("Zurich", "Basel", "Geneva", "Ticino", "Valais"), 
    geo_id_aggregated = c("Ger","Ger","Fra","Ita","Fra"),
    rr_central = 1.369, 
    rr_lower = 1.124,
    rr_upper = 1.664,
    rr_increment = 10, 
    cutoff_central = 5,
    erf_shape = "log_linear",
    exp_central = as.list(c(11, 11, 10, 8, 7)),
    exp_lower = as.list(c(10, 10, 9, 7, 6)),
    exp_upper = as.list(c(12, 12, 11, 9, 8)),
    bhd_central = as.list(c(4000, 2500, 3000, 1500, 500)),
    bhd_lower = as.list(c(3000, 1875, 2250, 1125, 375)),
    bhd_upper = as.list(c(5000, 3125, 3750, 1875, 625))
)
```

```{r, echo=TRUE,eval=FALSE,include=TRUE}
results_iteration[["health_detailed"]][["impact_raw"]]
```

```{r, echo=FALSE,include=TRUE,eval=TRUE}
results_iteration[["health_detailed"]][["impact_raw"]] |> knitr::kable()
```

# Q&A I

# Break

# Example: compare()

Goal: comparison of two scenarios with the population impact fraction (PIF) or delta approach.

```{r}
results_comparison <- compare(
    
     output_attribute_1 = 
       healthiar::attribute_health(
         exp_central = 8.85,
         cutoff_central = 5, 
         bhd_central = 25000,
         approach_risk = "relative_risk",
         erf_shape = "log_linear",
         rr_central = 1.118, rr_lower = 1.060, rr_upper = 1.179,
         rr_increment = 10,
         info = "PM2.5_mortality_2010"),
     
     output_attribute_2 = 
       healthiar::attribute_health(
         exp_central = 6, 
         cutoff_central = 5, 
         bhd_central = 25000,
         approach_risk = "relative_risk",
         erf_shape = "log_linear",
         rr_central = 1.118, rr_lower = 1.060, rr_upper = 1.179,
         rr_increment = 10,
         info = "PM2.5_mortality_2020"),
     
     approach_comparison = "delta"
)
```

```{r, echo=TRUE,eval=FALSE,include=TRUE}
results_comparison[["health_main"]]
```

```{r, echo=FALSE,include=TRUE,eval=TRUE}
results_comparison[["health_main"]] |> 
  dplyr::select(
    impact, impact_rounded,
    impact_1, impact_2,
    bhd,
    dplyr::starts_with("exp_"),
    -dplyr::starts_with("exp_ci"), # remove col "exp_ci"
    dplyr::starts_with("rr_con")) |> 
  dplyr::slice_head() |> 
  knitr::kable()
```

# Example: monetize()

Different monetization pathways available

-   **Direct** (default) after obtaining the health impacts
-   **Indirect** before the health impacts
-   **Discounting** yes/no
-   **Inflation** yes/no
-   **Stand-alone use** the function can either monetize a healthiar output or an "external" health impact

```{r}
results_monetization <- 
  healthiar::monetize(
    output_healthiar = results_pm_copd,
    approach_discount = "direct",
    discount_shape = "exponential",
    discount_rate = 0.03,
    discount_years = 5,
    valuation = 20)
```

# Example: socialize()

`socialize()` features

-   **Stand-alone use** the function can either be used with an `attribute_...` output or an *external* health impact
-   **Deprivation indicator** BEST-COST Multidimensional Deprivation Index (MDI) or any other (single-)indicator, e.g. house hold income

::: fragment
First create an example to be *socialized* using example data set `exdat_mdi`

```{r}
results_social <- attribute_health(
    geo_id_disaggregated = exdat_mdi$CS01012020,
        rr_central = 1.08,
    erf_shape = "log_linear", 
    rr_increment = 10,
    exp_central = as.list(exdat_mdi$PM25_MEAN),
    cutoff_central = 0,
    bhd_central = as.list(exdat_mdi$MORTALITY_TOTAL),
    population = exdat_mdi$POPULATION
)
```
:::

::: fragment
```{r}
results_social <- healthiar::socialize(
  output_healthiar = results_social,
  geo_id_disaggregated = exdat_mdi$CS01012020,
  social_indicator = exdat_mdi$score,
  n_quantile = 10
)
```
:::

# Additional features

Additional existing `healthiar` functions

-   `attribute_health()` with the argument `approach_multiexposure` for analysis with correlated exposures
-   `attribute_lifetable()` for YLL
-   `get_daly` as the sum of YLL and YLD
-   `attribute_mod()` modify an existing `healthiar` assessment
-   `cba()` cost-benefit analysis
-   `get_mdi()` creates the BEST-COST Multidimensional Deprivation Index (MDI)

::: callout-note
Coming (relatively) soon: function examples in the intro vignette!
:::

# Post-`healthiar` workflow

## Export results

::: panel-tabset
## Export as `.csv` file

```{r}
write.csv(x = results_pm_copd$health_main, file = "exported_results/results_pm_copd.csv")
```

## Save as `.Rdata` file

```{r}
save(results_pm_copd, file = "exported_results/results_pm_copd.Rdata")
```

## Export to Excel (as `.xlsx` file)

```{r}
openxlsx::write.xlsx(x = results_pm_copd$health_main, file = "exported_results/results_pm_copd.xlsx")
```

![*Exported to .xlsx format*](images/export_xlsx.png)
:::

## Visualize results

Visualization is out of scope of `healthiar`. You can visualize in

-   R, e.g. with the `ggplot2` package ([online book by the creator](https://ggplot2-book.org/))
-   Excel (export results first)
-   Other tools

# Homework - Exercises

## Exercise 1 - RR

-   How many lung cancer cases are attributable to PM2.5 exposure in a single year?

    -   With a **cutoff of 5** microgram/m\^3 ?

    -   With **no cutoff**?

-   What's the direct treatment **costs** per year in the no cutoff scenario?

**Data**

-   Population-weighted annual mean exposure: **10** microgram/m\^3
-   Baseline health data: **100'000** cases per year
-   Relative risk: **1.06** per 10 microgram/m\^3 exposure increment
-   ERF shape: linear
-   Average treatment cost: **50'000** EURO

## Exercise 2 - AR

How many people are highly annoyed due to noise exposure

-   In **total** ?
-   In the **highest exposure band** ?

*Advanced* How large is the health burden measured in YLD?
-   Assume that the population is exposed for **1 year**
-   Tip: check the function documentation of `attribute_health` to see which extra argument must be used to express the burden in YLD

**Data**

-   Use the data in the `healthiar` example data set `exdat_noise_ha`
-   Use the exposure values from the column `exposure_mean`
-   Use the ERF `90-3.1162*c+0.0342*c^2`
-   *Advanced* disability weight = `0.02`

::: callout-tip
Once `healthiar` is installed and loaded you can use the example data directly or add it to your *Environment* in RStudio by assigning it to a variable, e.g. `data <- exdat_noise_ha`
:::

# Q&A II

# Conclusion

note: stress that they must install & test healthiar before 2nd WS

If you encounter challenges during installation, get in touch with us!

------------------------------------------------------------------------

Thank you for your attention, and happy coding!

# Appendix

## Function documentation

::::::: panel-tabset
### Title

![*Title section*](images/fun_doc_title.png)

The title summarizes the function of the function (hehe) in one sentence.

The title shows up next to the function name in the package landing page.

### Description

![*Description section* provides additional details about the function's purpose](images/fun_doc_desc.png)

### Usage

![*Usage section* In the usage section you can find a bare-minimum function "template", which can either be auto-generated or created manually, as in this case.](images/fun_doc_usage.png)

::: callout-important
Any arguments that appear without a *=* symbol after them in the usage section have to be user-specified in all function call.
:::

::: callout-note
The inputs to the arguments in the usage section are default inputs
:::

### Arguments

![*Arguments section* This is the core section of the function documentation, where input type (`numeric` vs. `string`) & input options (if available) are specified.](images/fun_doc_arguments.png)

### Details

![Details section (optional) Additional details about the function](images/fun_doc_details.png)

::: callout-warning
Depending on the function, this section might be not very developed at the moment. Sometimes more function details are found in the intro vignette.
:::

### Value

![*Value section* Information about the function output](images/fun_doc_value.png)

### Examples

![Example section (optional) Shows how the function works](images/fun_doc_examples.png)

::: callout-tip
By clicking on `Run examples` the example(s) are executed and the output shown
:::

### Examples output

![*Example output* Obtained by clicking on `Run examples` (see previous slide)](images/fun_doc_examples_output.png)
:::::::

---

**Solution Exercise 1**

How many COPD cases are attributable to PM2.5 exposure in a single year?

::: panel-tabset

## cutoff = 5

```{r}
results_with_cutoff <- attribute_health(
    erf_shape = "linear",
    rr_central = 1.06, 
    rr_increment = 10,  # μg / m^3
    exp_central = 10, # μg / m^3
    cutoff_central = 5, # μg / m^3
    bhd_central = 100000 # baseline health data: COPD incidence
)

# Attributable impact
print(results_with_cutoff$health_main$impact_rounded)
```


## cutoff = 0

```{r}
results_no_cutoff <- attribute_health(
    erf_shape = "linear",
    rr_central = 1.06, 
    rr_increment = 10,
    exp_central = 10,
    cutoff_central = 0,
    bhd_central = 100000
)

# Attributable impact
print(results_no_cutoff$health_main$impact_rounded)
```
## Costs

```{r}
results_monetized <- monetize(
  output_healthiar = results_no_cutoff,
  valuation = 50000
)

# Cost
print(results_monetized$monetization_main$monetized_impact_rounded)
```

:::

---

**Solution Exercise 2**

::: panel-tabset

## Total

```{r}

results_noise_ha <- attribute_health(
    approach_risk = "absolute_risk",
    exp_central = exdat_noise_ha$exposure_mean,
    pop_exp = exdat_noise_ha$population_exposed_total,
    erf_eq_central = "90-3.1162*c+0.0342*c^2"
)

# Total attributable cases of high annoyance
print(results_noise_ha$health_main$impact_rounded)
```

## Highest exposure

```{r}
results_noise_ha <- attribute_health(
    approach_risk = "absolute_risk",
    exp_central = exdat_noise_ha$exposure_mean,
    pop_exp = exdat_noise_ha$population_exposed_total,
    erf_eq_central = "90-3.1162*c+0.0342*c^2"
)

# Attributable cases of high annoyance from exposure in highest noise band
print(results_noise_ha$health_detailed$impact_raw$impact[5])
```

## Advanced: YLD

```{r}
results_noise_ha_yld <- attribute_health(
    approach_risk = "absolute_risk",
    exp_central = exdat_noise_ha$exposure_mean,
    pop_exp = exdat_noise_ha$population_exposed_total,
    erf_eq_central = "90-3.1162*c+0.0342*c^2",
    dw_central = 0.02,
    duration_central = 1
)

# Attributable number of YLD due to high annoyance
print(results_noise_ha_yld$health_main$impact_rounded)
```
:::
